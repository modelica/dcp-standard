<?xml version="1.0" encoding="UTF-8"?>
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:vc="http://www.w3.org/2007/XMLSchema-versioning" elementFormDefault="qualified" attributeFormDefault="unqualified" vc:minVersion="1.1">
	<xs:annotation>
		<xs:documentation>Copyright(c) 2008-2011 MODELISAR consortium, 2012-2018 Modelica Association Project "FMI", 2015-2018 ACOSAR consortium, 2018-2019 Modelica Association Project "DCP".
             All rights reserved.

This file is licensed by the copyright holders under the 3-Clause BSD License
(https://opensource.org/licenses/BSD-3-Clause):

----------------------------------------------------------------------------
Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.

3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
----------------------------------------------------------------------------
		</xs:documentation>
	</xs:annotation>
	<xs:include schemaLocation="dcpUnit.xsd"/>
	<xs:include schemaLocation="dcpAnnotation.xsd"/>
	<xs:include schemaLocation="dcpVariable.xsd"/>
	<xs:include schemaLocation="dcpType.xsd"/>
	<xs:include schemaLocation="dcpTransportProtocolTypes.xsd"/>
	<xs:element name="dcpSlaveDescription">
		<xs:complexType>
			<xs:sequence>
				<xs:element name="OpMode">
					<xs:complexType>
						<xs:sequence>
							<xs:element name="HardRealTime" minOccurs="0"/>
							<xs:element name="SoftRealTime" minOccurs="0"/>
							<xs:element name="NonRealTime" minOccurs="0">
								<xs:complexType>
									<xs:attribute name="defaultSteps" type="xs:unsignedInt" default="1"/>
									<xs:attribute name="fixedSteps" type="xs:boolean" default="true"/>
									<xs:attribute name="minSteps" type="xs:unsignedInt">
										<xs:annotation>
											<xs:documentation>If fixedCommStepSize is not true.</xs:documentation>
										</xs:annotation>
									</xs:attribute>
									<xs:attribute name="maxSteps" type="xs:unsignedInt">
										<xs:annotation>
											<xs:documentation>If fixedCommStepSize is not true.</xs:documentation>
										</xs:annotation>
									</xs:attribute>
									<xs:assert test="(@fixedSteps eq true() and boolean(@minSteps) eq false() and boolean(@maxSteps) eq false()) or @fixedSteps eq false()"/>
									<xs:assert test="boolean(@minSteps) eq false() or boolean(@maxSteps) eq false() or @maxSteps >= @minSteps"/>
								</xs:complexType>
							</xs:element>
						</xs:sequence>
						<xs:assert test="(count(./HardRealTime) eq 1) or (count(./SoftRealTime) eq 1) or (count(./NonRealTime) eq 1)"/>
					</xs:complexType>
				</xs:element>
				<xs:element name="UnitDefinitions" minOccurs="0">
					<xs:complexType>
						<xs:sequence maxOccurs="unbounded">
							<xs:element name="Unit" type="dcpUnit">
								<xs:unique name="distinctDisplayUnitName">
									<xs:selector xpath="DisplayUnit"/>
									<xs:field xpath="@name"/>
								</xs:unique>
							</xs:element>
						</xs:sequence>
					</xs:complexType>
					<xs:unique name="distinctUnitName">
						<xs:selector xpath="Unit"/>
						<xs:field xpath="@name"/>
					</xs:unique>
				</xs:element>
				<xs:element name="TypeDefinitions" minOccurs="0">
					<xs:complexType>
						<xs:sequence maxOccurs="unbounded">
							<xs:element name="SimpleType" type="dcpSimpleType"/>
						</xs:sequence>
					</xs:complexType>
					<xs:unique name="distinctSimpleTypeName">
						<xs:selector xpath="SimpleType"/>
						<xs:field xpath="@name"/>
					</xs:unique>
				</xs:element>
				<xs:element name="VendorAnnotations" type="dcpAnnotation" minOccurs="0"/>
				<xs:element name="TimeRes">
					<xs:complexType>
						<xs:sequence minOccurs="0" maxOccurs="unbounded">
							<xs:choice>
								<xs:element name="Resolution">
									<xs:complexType>
										<xs:attribute name="numerator" type="xs:unsignedInt" default="1"/>
										<xs:attribute name="denominator" type="xs:unsignedInt" default="1000"/>
										<xs:attribute name="fixed" type="xs:boolean" default="true">
											<xs:annotation>
												<xs:documentation>if it's fixed, there can only be one resolution given</xs:documentation>
											</xs:annotation>
										</xs:attribute>
										<xs:attribute name="recommended" type="xs:boolean">
											<xs:annotation>
												<xs:documentation>multiple recommended resolutions possible</xs:documentation>
											</xs:annotation>
										</xs:attribute>
									</xs:complexType>
								</xs:element>
								<xs:element name="ResolutionRange">
									<xs:complexType>
										<xs:attribute name="numeratorFrom" type="xs:unsignedInt" use="required"/>
										<xs:attribute name="numeratorTo" type="xs:unsignedInt" use="required"/>
										<xs:attribute name="denominator" type="xs:unsignedInt" use="required"/>
									</xs:complexType>
								</xs:element>
							</xs:choice>
						</xs:sequence>
						<xs:assert test="((count(./Resolution[@fixed = true()]) eq 1) and (count(./ResolutionRange) eq 0) and (count(./Resolution) eq 1)) or (count(./Resolution[@fixed eq false()]) eq count(./Resolution))"/>
					</xs:complexType>
				</xs:element>
				<xs:element name="Heartbeat" minOccurs="0">
					<xs:complexType>
						<xs:sequence>
							<xs:element name="MaximumPeriodicInterval">
								<xs:complexType>
									<xs:attribute name="numerator" type="xs:unsignedInt" use="optional" default="1"/>
									<xs:attribute name="denominator" type="xs:unsignedInt" use="optional" default="1"/>
								</xs:complexType>
							</xs:element>
						</xs:sequence>
					</xs:complexType>
				</xs:element>
				<xs:element name="TransportProtocols">
					<xs:complexType>
						<xs:sequence>
							<xs:element name="UDP_IPv4" minOccurs="0">
								<xs:complexType>
									<xs:complexContent>
										<xs:extension base="dcpIPv4Type">
											<xs:attribute name="maxPduSize" type="xs:unsignedInt" default="65507"/>
										</xs:extension>
									</xs:complexContent>
								</xs:complexType>
							</xs:element>
							<xs:element name="CAN" minOccurs="0">
								<xs:complexType/>
							</xs:element>
							<xs:element name="USB2" minOccurs="0">
								<xs:complexType>
									<xs:complexContent>
										<xs:extension base="dcpUSB2Type">
											<xs:attribute name="maxPduSize" type="xs:unsignedInt" default="1024"/>
										</xs:extension>
									</xs:complexContent>
								</xs:complexType>
							</xs:element>
							<xs:element name="Bluetooth" minOccurs="0">
								<xs:complexType>
									<xs:complexContent>
										<xs:extension base="dcpBluetoothType">
											<xs:attribute name="maxPduSize" type="xs:unsignedInt" default="1011"/>
										</xs:extension>
									</xs:complexContent>
								</xs:complexType>
							</xs:element>
							<xs:element name="TCP_IPv4" minOccurs="0">
								<xs:complexType>
									<xs:complexContent>
										<xs:extension base="dcpIPv4Type">
											<xs:attribute name="maxPduSize" type="xs:unsignedInt" default="4294967267"/>
										</xs:extension>
									</xs:complexContent>
								</xs:complexType>
							</xs:element>
						</xs:sequence>
					</xs:complexType>
				</xs:element>
				<xs:element name="CapabilityFlags">
					<xs:complexType>
						<xs:attribute name="canAcceptConfigPdus" type="xs:boolean" default="false"/>
						<xs:attribute name="canHandleReset" type="xs:boolean" default="false"/>
						<xs:attribute name="canHandleVariableSteps" type="xs:boolean" default="false"/>
						<xs:attribute name="canMonitorHeartbeat" type="xs:boolean" default="false"/>
						<xs:attribute name="canProvideLogOnRequest" type="xs:boolean" use="optional" default="false"/>
						<xs:attribute name="canProvideLogOnNotification" type="xs:boolean" use="optional" default="false"/>
					</xs:complexType>
				</xs:element>
				<xs:element name="Variables">
					<xs:complexType>
						<xs:sequence maxOccurs="unbounded">
							<xs:element name="Variable" type="dcpVariable"/>
						</xs:sequence>
						<xs:assert test="every $linkedVR in Variable/*/Dimensions/Dimension/@linkedVR satisfies count(Variable[@valueReference eq $linkedVR]/StructuralParameter) = 1"/>
					</xs:complexType>
					<xs:unique name="distinctVariableName">
						<xs:selector xpath="Variable"/>
						<xs:field xpath="@name"/>
					</xs:unique>
					<xs:unique name="distinctVariableValueReference">
						<xs:selector xpath="Variable"/>
						<xs:field xpath="@valueReference"/>
					</xs:unique>
				</xs:element>
				<xs:element name="Log" minOccurs="0">
					<xs:complexType>
						<xs:sequence>
							<xs:element name="Categories">
								<xs:complexType>
									<xs:sequence maxOccurs="unbounded">
										<xs:element name="Category">
											<xs:complexType>
												<xs:attribute name="id" type="xs:unsignedByte" use="required"/>
												<xs:attribute name="name" type="xs:normalizedString" use="required"/>
											</xs:complexType>
										</xs:element>
									</xs:sequence>
								</xs:complexType>
								<xs:unique name="distinctCategoryId">
									<xs:selector xpath="Category"/>
									<xs:field xpath="@id"/>
								</xs:unique>
								<xs:unique name="distinctCategoryName">
									<xs:selector xpath="Category"/>
									<xs:field xpath="@name"/>
								</xs:unique>
							</xs:element>
							<xs:element name="Templates">
								<xs:complexType>
									<xs:sequence maxOccurs="unbounded">
										<xs:element name="Template">
											<xs:complexType>
												<xs:attribute name="id" type="xs:unsignedByte" use="required"/>
												<xs:attribute name="category" type="xs:unsignedByte" use="required"/>
												<xs:attribute name="level" type="xs:unsignedByte" use="required"/>
												<xs:attribute name="msg" type="xs:normalizedString" use="required"/>
											</xs:complexType>
										</xs:element>
									</xs:sequence>
								</xs:complexType>
								<xs:unique name="distinctTemplateId">
									<xs:selector xpath="Template"/>
									<xs:field xpath="@id"/>
								</xs:unique>
							</xs:element>
						</xs:sequence>
					</xs:complexType>
					<xs:key name="LogCategoryKey">
						<xs:selector xpath="Categories/Category"/>
						<xs:field xpath="@id"/>
					</xs:key>
					<xs:keyref name="LogCategoryKeyRef" refer="LogCategoryKey">
						<xs:selector xpath="Templates/Template"/>
						<xs:field xpath="@category"/>
					</xs:keyref>
				</xs:element>
			</xs:sequence>
			<xs:attribute name="dcpMajorVersion" type="xs:unsignedByte" use="required">
				<xs:annotation>
					<xs:documentation>Major version of implemented DCP specification</xs:documentation>
				</xs:annotation>
			</xs:attribute>
			<xs:attribute name="dcpMinorVersion" type="xs:unsignedByte" use="required">
				<xs:annotation>
					<xs:documentation>Minor version of implemented DCP specification</xs:documentation>
				</xs:annotation>
			</xs:attribute>
			<xs:attribute name="dcpSlaveName" type="xs:string" use="required">
				<xs:annotation>
					<xs:documentation>Name of the DCP slave</xs:documentation>
				</xs:annotation>
			</xs:attribute>
			<xs:attribute name="uuid" use="required">
				<xs:annotation>
					<xs:documentation>Fingerprint of xml-file content to verify that xml-file and implementation are compatible to each other</xs:documentation>
				</xs:annotation>
				<xs:simpleType>
					<xs:restriction base="xs:string">
						<xs:length value="36"/>
						<xs:pattern value="[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}"/>
					</xs:restriction>
				</xs:simpleType>
			</xs:attribute>
			<xs:attribute name="description" type="xs:string"/>
			<xs:attribute name="author" type="xs:string"/>
			<xs:attribute name="version" type="xs:normalizedString">
				<xs:annotation>
					<xs:documentation>Version of DCP slave, e.g., "1.4.1"</xs:documentation>
				</xs:annotation>
			</xs:attribute>
			<xs:attribute name="copyright" type="xs:string">
				<xs:annotation>
					<xs:documentation>Information on intellectual property copyright for this DCP slave</xs:documentation>
				</xs:annotation>
			</xs:attribute>
			<xs:attribute name="license" type="xs:string">
				<xs:annotation>
					<xs:documentation>Information on intellectual property licensing for this DCP slave</xs:documentation>
				</xs:annotation>
			</xs:attribute>
			<xs:attribute name="generationTool" type="xs:normalizedString"/>
			<xs:attribute name="generationDateAndTime" type="xs:dateTime"/>
			<xs:attribute name="variableNamingConvention" use="optional" default="flat">
				<xs:simpleType>
					<xs:restriction base="xs:normalizedString">
						<xs:enumeration value="flat"/>
						<xs:enumeration value="structured"/>
					</xs:restriction>
				</xs:simpleType>
			</xs:attribute>
			<xs:assert test="((./CapabilityFlags/@canMonitorHeartbeat eq true()) and boolean(./Heartbeat)) or ((./CapabilityFlags/@canMonitorHeartbeat eq false()) and boolean(./Heartbeat) eq false())"/>
			<xs:assert test="((./CapabilityFlags/@canProvideLogOnRequest eq true() or ./CapabilityFlags/@canProvideLogOnNotification eq true()) and boolean(./Log)) or ((./CapabilityFlags/@canProvideLogOnRequest eq false() and ./CapabilityFlags/@canProvideLogOnNotification) and boolean(./Log) eq false())"/>
		</xs:complexType>
		<xs:key name="SimpleTypeKey">
			<xs:selector xpath="TypeDefinitions/SimpleType"/>
			<xs:field xpath="@name"/>
		</xs:key>
		<xs:keyref name="SimpleTypeKeyRef" refer="SimpleTypeKey">
			<xs:selector xpath="Variables/Variable"/>
			<xs:field xpath="@declaredType"/>
		</xs:keyref>
	</xs:element>
</xs:schema>
