<?xml version="1.0" encoding="UTF-8"?>
<!-- edited with XMLSpy v2018 rel. 2 (x64) (http://www.altova.com) by Martin Krammer (Virtual Vehicle) -->
<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:vc="http://www.w3.org/2007/XMLSchema-versioning" elementFormDefault="qualified" attributeFormDefault="unqualified" vc:minVersion="1.1">
	<xs:annotation>
		<xs:documentation>Copyright(c) 2008-2011 MODELISAR consortium, 2012-2018 Modelica Association Project "FMI", 2015-2018 ACOSAR consortium, 2018-2019 Modelica Association Project "DCP".
             All rights reserved.

This file is licensed by the copyright holders under the 3-Clause BSD License
(https://opensource.org/licenses/BSD-3-Clause):

----------------------------------------------------------------------------
Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.

3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
----------------------------------------------------------------------------
		</xs:documentation>
	</xs:annotation>
	<xs:override schemaLocation="dcpType.xsd"/>
	<xs:include schemaLocation="dcpAnnotation.xsd"/>
	<xs:include schemaLocation="dcpDataTypes.xsd"/>
	<xs:attribute name="declaredType" type="xs:normalizedString">
		<xs:annotation>
			<xs:documentation>If present, name of type defined with TypeDefinitions / SimpleType providing defaults.</xs:documentation>
		</xs:annotation>
	</xs:attribute>
	<xs:attributeGroup name="timeInstanceDeviation">
		<xs:attribute name="preEdge" type="xs:double"/>
		<xs:attribute name="postEdge" type="xs:double"/>
		<xs:attribute name="maxConsecMissedPdus" type="xs:unsignedInt"/>
	</xs:attributeGroup>
	<xs:complexType name="dcpVariable">
		<xs:annotation>
			<xs:documentation>Properties of a scalar variable</xs:documentation>
		</xs:annotation>
		<xs:sequence>
			<xs:choice>
				<xs:element name="Input">
					<xs:complexType>
						<xs:sequence>
							<xs:choice>
								<xs:element name="Int8">
									<xs:complexType>
										<xs:complexContent>
											<xs:extension base="dcpInteger8Type">
												<xs:attribute name="start" use="required">
													<xs:simpleType>
														<xs:list itemType="xs:byte"/>
													</xs:simpleType>
												</xs:attribute>
											</xs:extension>
										</xs:complexContent>
									</xs:complexType>
								</xs:element>
								<xs:element name="Int16">
									<xs:complexType>
										<xs:complexContent>
											<xs:extension base="dcpInteger16Type">
												<xs:attribute name="start" use="required">
													<xs:simpleType>
														<xs:list itemType="xs:short"/>
													</xs:simpleType>
												</xs:attribute>
											</xs:extension>
										</xs:complexContent>
									</xs:complexType>
								</xs:element>
								<xs:element name="Int32">
									<xs:complexType>
										<xs:complexContent>
											<xs:extension base="dcpInteger32Type">
												<xs:attribute name="start" use="required">
													<xs:simpleType>
														<xs:list itemType="xs:integer"/>
													</xs:simpleType>
												</xs:attribute>
											</xs:extension>
										</xs:complexContent>
									</xs:complexType>
								</xs:element>
								<xs:element name="Int64">
									<xs:complexType>
										<xs:complexContent>
											<xs:extension base="dcpInteger64Type">
												<xs:attribute name="start" use="required">
													<xs:simpleType>
														<xs:list itemType="xs:long"/>
													</xs:simpleType>
												</xs:attribute>
											</xs:extension>
										</xs:complexContent>
									</xs:complexType>
								</xs:element>
								<xs:element name="Uint8">
									<xs:complexType>
										<xs:complexContent>
											<xs:extension base="dcpUnsignedInteger8Type">
												<xs:attribute name="start" use="required">
													<xs:simpleType>
														<xs:list itemType="xs:unsignedByte"/>
													</xs:simpleType>
												</xs:attribute>
											</xs:extension>
										</xs:complexContent>
									</xs:complexType>
								</xs:element>
								<xs:element name="Uint16">
									<xs:complexType>
										<xs:complexContent>
											<xs:extension base="dcpUnsignedInteger16Type">
												<xs:attribute name="start" use="required">
													<xs:simpleType>
														<xs:list itemType="xs:unsignedShort"/>
													</xs:simpleType>
												</xs:attribute>
											</xs:extension>
										</xs:complexContent>
									</xs:complexType>
								</xs:element>
								<xs:element name="Uint32">
									<xs:complexType>
										<xs:complexContent>
											<xs:extension base="dcpUnsignedInteger32Type">
												<xs:attribute name="start" use="required">
													<xs:simpleType>
														<xs:list itemType="xs:unsignedInt"/>
													</xs:simpleType>
												</xs:attribute>
											</xs:extension>
										</xs:complexContent>
									</xs:complexType>
								</xs:element>
								<xs:element name="Uint64">
									<xs:complexType>
										<xs:complexContent>
											<xs:extension base="dcpUnsignedInteger64Type">
												<xs:attribute name="start" use="required">
													<xs:simpleType>
														<xs:list itemType="xs:unsignedLong"/>
													</xs:simpleType>
												</xs:attribute>
											</xs:extension>
										</xs:complexContent>
									</xs:complexType>
								</xs:element>
								<xs:element name="Float32">
									<xs:complexType>
										<xs:complexContent>
											<xs:extension base="dcpFloat32Type">
												<xs:attribute name="start" use="required">
													<xs:simpleType>
														<xs:list itemType="xs:float"/>
													</xs:simpleType>
												</xs:attribute>
											</xs:extension>
										</xs:complexContent>
									</xs:complexType>
								</xs:element>
								<xs:element name="Float64">
									<xs:complexType>
										<xs:complexContent>
											<xs:extension base="dcpFloat64Type">
												<xs:attribute name="start" use="required">
													<xs:simpleType>
														<xs:list itemType="xs:double"/>
													</xs:simpleType>
												</xs:attribute>
											</xs:extension>
										</xs:complexContent>
									</xs:complexType>
								</xs:element>
								<xs:element name="String">
									<xs:complexType>
										<xs:complexContent>
											<xs:extension base="dcpStringType">
												<xs:attribute name="start" type="xs:normalizedString" use="required"/>
											</xs:extension>
										</xs:complexContent>
									</xs:complexType>
								</xs:element>
								<xs:element name="Binary">
									<xs:complexType>
										<xs:complexContent>
											<xs:extension base="dcpBinaryType">
												<xs:attribute name="start" type="xs:hexBinary" use="required"/>
											</xs:extension>
										</xs:complexContent>
									</xs:complexType>
								</xs:element>
							</xs:choice>
							<xs:element name="Dimensions" type="dcpDimensionsType" minOccurs="0"/>
						</xs:sequence>
					</xs:complexType>
				</xs:element>
				<xs:element name="Output">
					<xs:complexType>
						<xs:sequence>
							<xs:choice>
								<xs:element name="Int8">
									<xs:complexType>
										<xs:complexContent>
											<xs:extension base="dcpInteger8Type">
												<xs:attribute name="start">
													<xs:simpleType>
														<xs:list itemType="xs:byte"/>
													</xs:simpleType>
												</xs:attribute>
											</xs:extension>
										</xs:complexContent>
									</xs:complexType>
								</xs:element>
								<xs:element name="Int16">
									<xs:complexType>
										<xs:complexContent>
											<xs:extension base="dcpInteger16Type">
												<xs:attribute name="start">
													<xs:simpleType>
														<xs:list itemType="xs:short"/>
													</xs:simpleType>
												</xs:attribute>
											</xs:extension>
										</xs:complexContent>
									</xs:complexType>
								</xs:element>
								<xs:element name="Int32">
									<xs:complexType>
										<xs:complexContent>
											<xs:extension base="dcpInteger32Type">
												<xs:attribute name="start">
													<xs:simpleType>
														<xs:list itemType="xs:integer"/>
													</xs:simpleType>
												</xs:attribute>
											</xs:extension>
										</xs:complexContent>
									</xs:complexType>
								</xs:element>
								<xs:element name="Int64">
									<xs:complexType>
										<xs:complexContent>
											<xs:extension base="dcpInteger64Type">
												<xs:attribute name="start">
													<xs:simpleType>
														<xs:list itemType="xs:long"/>
													</xs:simpleType>
												</xs:attribute>
											</xs:extension>
										</xs:complexContent>
									</xs:complexType>
								</xs:element>
								<xs:element name="Uint8">
									<xs:complexType>
										<xs:complexContent>
											<xs:extension base="dcpUnsignedInteger8Type">
												<xs:attribute name="start">
													<xs:simpleType>
														<xs:list itemType="xs:unsignedInt"/>
													</xs:simpleType>
												</xs:attribute>
											</xs:extension>
										</xs:complexContent>
									</xs:complexType>
								</xs:element>
								<xs:element name="Uint16">
									<xs:complexType>
										<xs:complexContent>
											<xs:extension base="dcpUnsignedInteger16Type">
												<xs:attribute name="start">
													<xs:simpleType>
														<xs:list itemType="xs:unsignedShort"/>
													</xs:simpleType>
												</xs:attribute>
											</xs:extension>
										</xs:complexContent>
									</xs:complexType>
								</xs:element>
								<xs:element name="Uint32">
									<xs:complexType>
										<xs:complexContent>
											<xs:extension base="dcpUnsignedInteger32Type">
												<xs:attribute name="start">
													<xs:simpleType>
														<xs:list itemType="xs:unsignedInt"/>
													</xs:simpleType>
												</xs:attribute>
											</xs:extension>
										</xs:complexContent>
									</xs:complexType>
								</xs:element>
								<xs:element name="Uint64">
									<xs:complexType>
										<xs:complexContent>
											<xs:extension base="dcpUnsignedInteger64Type">
												<xs:attribute name="start">
													<xs:simpleType>
														<xs:list itemType="xs:unsignedLong"/>
													</xs:simpleType>
												</xs:attribute>
											</xs:extension>
										</xs:complexContent>
									</xs:complexType>
								</xs:element>
								<xs:element name="Float32">
									<xs:complexType>
										<xs:complexContent>
											<xs:extension base="dcpFloat32Type">
												<xs:attribute name="start">
													<xs:simpleType>
														<xs:list itemType="xs:float"/>
													</xs:simpleType>
												</xs:attribute>
											</xs:extension>
										</xs:complexContent>
									</xs:complexType>
								</xs:element>
								<xs:element name="Float64">
									<xs:complexType>
										<xs:complexContent>
											<xs:extension base="dcpFloat64Type">
												<xs:attribute name="start">
													<xs:simpleType>
														<xs:list itemType="xs:double"/>
													</xs:simpleType>
												</xs:attribute>
											</xs:extension>
										</xs:complexContent>
									</xs:complexType>
								</xs:element>
								<xs:element name="String">
									<xs:complexType>
										<xs:complexContent>
											<xs:extension base="dcpStringType">
												<xs:attribute name="start" type="xs:normalizedString"/>
											</xs:extension>
										</xs:complexContent>
									</xs:complexType>
								</xs:element>
								<xs:element name="Binary">
									<xs:complexType>
										<xs:complexContent>
											<xs:extension base="dcpBinaryType">
												<xs:attribute name="start" type="xs:hexBinary"/>
											</xs:extension>
										</xs:complexContent>
									</xs:complexType>
								</xs:element>
							</xs:choice>
							<xs:element name="Dimensions" type="dcpDimensionsType" minOccurs="0"/>
							<xs:element name="Dependencies" minOccurs="0">
								<xs:complexType>
									<xs:sequence>
										<xs:element name="Initialization" minOccurs="0">
											<xs:complexType>
												<xs:sequence minOccurs="0" maxOccurs="unbounded">
													<xs:element name="Dependency" type="dcpDependencyType"/>
												</xs:sequence>
											</xs:complexType>
										</xs:element>
										<xs:element name="Run" minOccurs="0">
											<xs:complexType>
												<xs:sequence minOccurs="0" maxOccurs="unbounded">
													<xs:element name="Dependency" type="dcpDependencyType"/>
												</xs:sequence>
											</xs:complexType>
										</xs:element>
									</xs:sequence>
								</xs:complexType>
							</xs:element>
						</xs:sequence>
						<xs:attribute name="defaultSteps" default="1">
							<xs:simpleType>
								<xs:restriction base="xs:unsignedInt">
									<xs:minInclusive value="1"/>
								</xs:restriction>
							</xs:simpleType>
						</xs:attribute>
						<xs:attribute name="fixedSteps" type="xs:boolean" default="true"/>
						<xs:attribute name="minSteps">
							<xs:simpleType>
								<xs:restriction base="xs:unsignedInt">
									<xs:minInclusive value="1"/>
								</xs:restriction>
							</xs:simpleType>
						</xs:attribute>
						<xs:attribute name="maxSteps">
							<xs:simpleType>
								<xs:restriction base="xs:unsignedInt">
									<xs:minExclusive value="1"/>
								</xs:restriction>
							</xs:simpleType>
						</xs:attribute>
						<xs:attribute name="initialization" type="xs:boolean" default="false"/>
						<xs:assert test="(@fixedSteps eq true() and @defaultSteps >= 1 and not(@minSteps) and not(@maxSteps)) or (@fixedSteps eq false() and @minSteps and @maxSteps and (@maxSteps > @minSteps))"/>
						<xs:assert test="(@initialization eq true() and count(./Dependencies/Run) eq 0) or @initialization eq false()"/>
					</xs:complexType>
				</xs:element>
				<xs:element name="Parameter">
					<xs:complexType>
						<xs:sequence>
							<xs:choice>
								<xs:element name="Int8">
									<xs:complexType>
										<xs:complexContent>
											<xs:extension base="dcpInteger8Type">
												<xs:attribute name="start" use="required">
													<xs:simpleType>
														<xs:list itemType="xs:byte"/>
													</xs:simpleType>
												</xs:attribute>
											</xs:extension>
										</xs:complexContent>
									</xs:complexType>
								</xs:element>
								<xs:element name="Int16">
									<xs:complexType>
										<xs:complexContent>
											<xs:extension base="dcpInteger16Type">
												<xs:attribute name="start" use="required">
													<xs:simpleType>
														<xs:list itemType="xs:short"/>
													</xs:simpleType>
												</xs:attribute>
											</xs:extension>
										</xs:complexContent>
									</xs:complexType>
								</xs:element>
								<xs:element name="Int32">
									<xs:complexType>
										<xs:complexContent>
											<xs:extension base="dcpInteger32Type">
												<xs:attribute name="start" use="required">
													<xs:simpleType>
														<xs:list itemType="xs:int"/>
													</xs:simpleType>
												</xs:attribute>
											</xs:extension>
										</xs:complexContent>
									</xs:complexType>
								</xs:element>
								<xs:element name="Int64">
									<xs:complexType>
										<xs:complexContent>
											<xs:extension base="dcpInteger64Type">
												<xs:attribute name="start" use="required">
													<xs:simpleType>
														<xs:list itemType="xs:long"/>
													</xs:simpleType>
												</xs:attribute>
											</xs:extension>
										</xs:complexContent>
									</xs:complexType>
								</xs:element>
								<xs:element name="Uint8">
									<xs:complexType>
										<xs:complexContent>
											<xs:extension base="dcpUnsignedInteger8Type">
												<xs:attribute name="start" use="required">
													<xs:simpleType>
														<xs:list itemType="xs:unsignedByte"/>
													</xs:simpleType>
												</xs:attribute>
											</xs:extension>
										</xs:complexContent>
									</xs:complexType>
								</xs:element>
								<xs:element name="Uint16">
									<xs:complexType>
										<xs:complexContent>
											<xs:extension base="dcpUnsignedInteger16Type">
												<xs:attribute name="start" use="required">
													<xs:simpleType>
														<xs:list itemType="xs:unsignedShort"/>
													</xs:simpleType>
												</xs:attribute>
											</xs:extension>
										</xs:complexContent>
									</xs:complexType>
								</xs:element>
								<xs:element name="Uint32">
									<xs:complexType>
										<xs:complexContent>
											<xs:extension base="dcpUnsignedInteger32Type">
												<xs:attribute name="start" use="required">
													<xs:simpleType>
														<xs:list itemType="xs:unsignedInt"/>
													</xs:simpleType>
												</xs:attribute>
											</xs:extension>
										</xs:complexContent>
									</xs:complexType>
								</xs:element>
								<xs:element name="Uint64">
									<xs:complexType>
										<xs:complexContent>
											<xs:extension base="dcpUnsignedInteger64Type">
												<xs:attribute name="start" use="required">
													<xs:simpleType>
														<xs:list itemType="xs:unsignedLong"/>
													</xs:simpleType>
												</xs:attribute>
											</xs:extension>
										</xs:complexContent>
									</xs:complexType>
								</xs:element>
								<xs:element name="Float32">
									<xs:complexType>
										<xs:complexContent>
											<xs:extension base="dcpFloat32Type">
												<xs:attribute name="start" use="required">
													<xs:simpleType>
														<xs:list itemType="xs:float"/>
													</xs:simpleType>
												</xs:attribute>
											</xs:extension>
										</xs:complexContent>
									</xs:complexType>
								</xs:element>
								<xs:element name="Float64">
									<xs:complexType>
										<xs:complexContent>
											<xs:extension base="dcpFloat64Type">
												<xs:attribute name="start" use="required">
													<xs:simpleType>
														<xs:list itemType="xs:double"/>
													</xs:simpleType>
												</xs:attribute>
											</xs:extension>
										</xs:complexContent>
									</xs:complexType>
								</xs:element>
								<xs:element name="String">
									<xs:complexType>
										<xs:complexContent>
											<xs:extension base="dcpStringType">
												<xs:attribute name="start" type="xs:normalizedString" use="required"/>
											</xs:extension>
										</xs:complexContent>
									</xs:complexType>
								</xs:element>
								<xs:element name="Binary">
									<xs:complexType>
										<xs:complexContent>
											<xs:extension base="dcpBinaryType">
												<xs:attribute name="start" type="xs:hexBinary" use="required"/>
											</xs:extension>
										</xs:complexContent>
									</xs:complexType>
								</xs:element>
							</xs:choice>
							<xs:element name="Dimensions" type="dcpDimensionsType" minOccurs="0"/>
						</xs:sequence>
					</xs:complexType>
				</xs:element>
				<xs:element name="StructuralParameter">
					<xs:complexType>
						<xs:choice>
							<xs:element name="Uint8">
								<xs:complexType>
									<xs:attribute name="start" use="required">
										<xs:simpleType>
											<xs:restriction base="xs:unsignedByte">
												<xs:minInclusive value="1"/>
											</xs:restriction>
										</xs:simpleType>
									</xs:attribute>
								</xs:complexType>
							</xs:element>
							<xs:element name="Uint16">
								<xs:complexType>
									<xs:attribute name="start" use="required">
										<xs:simpleType>
											<xs:restriction base="xs:unsignedShort">
												<xs:minInclusive value="1"/>
											</xs:restriction>
										</xs:simpleType>
									</xs:attribute>
								</xs:complexType>
							</xs:element>
							<xs:element name="Uint32">
								<xs:complexType>
									<xs:attribute name="start" use="required">
										<xs:simpleType>
											<xs:restriction base="xs:unsignedInt">
												<xs:minInclusive value="1"/>
											</xs:restriction>
										</xs:simpleType>
									</xs:attribute>
								</xs:complexType>
							</xs:element>
							<xs:element name="Uint64">
								<xs:complexType>
									<xs:attribute name="start" use="required">
										<xs:simpleType>
											<xs:restriction base="xs:unsignedLong">
												<xs:minInclusive value="1"/>
											</xs:restriction>
										</xs:simpleType>
									</xs:attribute>
								</xs:complexType>
							</xs:element>
						</xs:choice>
					</xs:complexType>
				</xs:element>
			</xs:choice>
			<xs:element name="Annotations" type="dcpAnnotation" minOccurs="0">
				<xs:annotation>
					<xs:documentation>Additional data of the scalar variable, e.g., for the dialog menu or the graphical layout</xs:documentation>
				</xs:annotation>
			</xs:element>
		</xs:sequence>
		<xs:attribute name="name" type="xs:normalizedString" use="required">
			<xs:annotation>
				<xs:documentation>Identifier of variable, e.g. "a.b.mod[3,4].'#123'.c". "name" must be unique with respect to all other elements of the ModelVariables list</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="valueReference" type="xs:unsignedLong" use="required">
			<xs:annotation>
				<xs:documentation>Identifier for variable value in DCP PDUs (unique with respect to all variables)</xs:documentation>
			</xs:annotation>
		</xs:attribute>
		<xs:attribute name="description" type="xs:string"/>
		<xs:attribute name="variability" default="continuous">
			<xs:annotation>
				<xs:documentation>constant: value never changes
fixed: value fixed after initialization
tunable: value constant between external events
discrete: value constant between internal events
continuous: no restriction on value changes</xs:documentation>
			</xs:annotation>
			<xs:simpleType>
				<xs:restriction base="xs:normalizedString">
					<xs:enumeration value="fixed"/>
					<xs:enumeration value="tunable"/>
					<xs:enumeration value="discrete"/>
					<xs:enumeration value="continuous"/>
				</xs:restriction>
			</xs:simpleType>
		</xs:attribute>
		<xs:attributeGroup ref="timeInstanceDeviation"/>
		<xs:attribute ref="declaredType"/>
		<xs:assert test="(boolean(@maxConsecMissedPdus) and boolean(./Output) eq false()) or boolean(@maxConsecMissedPdus) eq false()"/>
		<xs:assert test="(@variability='fixed'  and boolean(./Parameter)) or (@variability='tunable' and boolean(./Parameter)) or (@variability='fixed'  and boolean(./StructuralParameter)) or (@variability='tunable' and boolean(./StructuralParameter)) or (@variability='discrete' and boolean(./Input)) or (@variability='continuous' and boolean(./Input)) or (@variability='continuous' and boolean(./Output)) or (@variability='discrete' and boolean(./Output))"/>
		<xs:assert test="count(./*/Dimensions) eq 0 or (count(./*/String) eq 0 and count(./*/Binary) eq 0)"/>
	</xs:complexType>
	<xs:complexType name="dcpDimensionsType">
		<xs:sequence maxOccurs="unbounded">
			<xs:element name="Dimension">
				<xs:complexType>
					<xs:attribute name="constant">
						<xs:simpleType>
							<xs:restriction base="xs:unsignedLong">
								<xs:minInclusive value="1"/>
							</xs:restriction>
						</xs:simpleType>
					</xs:attribute>
					<xs:attribute name="linkedVR" type="xs:unsignedLong"/>
					<xs:assert test="((@constant and not(@linkedVR)) or (not(@constant) and @linkedVR))"/>
				</xs:complexType>
			</xs:element>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="dcpVariableType">
		<xs:sequence>
			<xs:choice>
				<xs:element name="Int8" type="dcpInteger8Type"/>
				<xs:element name="Int16" type="dcpInteger16Type"/>
				<xs:element name="Int32" type="dcpInteger32Type"/>
				<xs:element name="Int64" type="dcpInteger64Type"/>
				<xs:element name="Uint8" type="dcpUnsignedInteger8Type"/>
				<xs:element name="Uint16" type="dcpUnsignedInteger16Type"/>
				<xs:element name="Uint32" type="dcpUnsignedInteger32Type"/>
				<xs:element name="Uint64" type="dcpUnsignedInteger64Type"/>
				<xs:element name="Float32" type="dcpFloat32Type"/>
				<xs:element name="Float64" type="dcpFloat64Type"/>
				<xs:element name="String" type="dcpStringType"/>
				<xs:element name="Binary" type="dcpBinaryType"/>
			</xs:choice>
			<xs:element name="Dimensions" type="dcpDimensionsType" minOccurs="0"/>
		</xs:sequence>
	</xs:complexType>
	<xs:complexType name="dcpDependencyType">
		<xs:attribute name="vr" type="xs:unsignedLong" use="required"/>
		<xs:attribute name="dependencyKind" use="required">
			<xs:simpleType>
				<xs:restriction base="xs:string">
					<xs:enumeration value="dependent"/>
					<xs:enumeration value="linear"/>
				</xs:restriction>
			</xs:simpleType>
		</xs:attribute>
	</xs:complexType>
</xs:schema>
